pipeline {
    agent any

    environment {
        AWS_PROFILE = ""
        DEST_REGION = "us-west-2"
        SOURCE_REGION = "us-east-1"
        SOURCE_AMI_ID = ""
        TARGET_USER_ID = ""
        AMI_NAME = "PMv5 SL AMI Promoted from stg"
        AMI_DESCRIPTION = "Shared AMI from ${SOURCE_REGION}"
        MAX_TRIES = 5
        COUNTER = 1
        SNAPSHOT_IDS = ""
    }

    stages {
        stage('Fetch Tags') {
            steps {
                script {
                    // Fetch tags from the source AMI
                    TAGS_JSON = sh(
                        script: """
                            aws ec2 describe-images \
                                --region ${SOURCE_REGION} \
                                --image-ids ${SOURCE_AMI_ID} \
                                --profile ${AWS_PROFILE} \
                                --query 'Images[*].Tags' \
                                --output json
                        """,
                        returnStdout: true
                    ).trim()

                    // Process tags into the required format
                    TAGS = sh(
                        script: """
                            echo '${TAGS_JSON}' | grep -oP '"Key": "\\K[^"]+|"Value": "\\K[^"]+' | sed 'N;s/\\n/ /' | awk '
                            BEGIN { printf "[" }
                            {
                                if (NR > 1) printf ","
                                printf "{\\"Key\\":\\"%s\\",\\"Value\\":\\"%s\\"}", \$1, \$2
                            }
                            END { printf "]" }'
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Tags: ${TAGS}"
                }
            }
        }

        stage('Copy AMI') {
            steps {
                script {
                    echo "Copying AMI to ${DEST_REGION}..."

                    // Copy the AMI to the destination region
                    NEW_AMI_ID = sh(
                        script: """
                            aws ec2 copy-image \
                                --region ${DEST_REGION} \
                                --source-region ${SOURCE_REGION} \
                                --source-image-id ${SOURCE_AMI_ID} \
                                --name "${AMI_NAME}" \
                                --description "${AMI_DESCRIPTION}" \
                                --query "ImageId" \
                                --tag-specifications "ResourceType=image,Tags=${TAGS}" \
                                --profile ${AWS_PROFILE} \
                                --output text
                        """,
                        returnStdout: true
                    ).trim()

                    echo "New AMI ID: ${NEW_AMI_ID}"
                }
            }
        }

        stage('Wait for AMI Availability') {
            steps {
                script {
                    while (COUNTER <= MAX_TRIES) {
                        // Check the state of the new AMI
                        state = sh(
                            script: """
                                aws ec2 describe-images \
                                    --image-ids ${NEW_AMI_ID} \
                                    --region ${DEST_REGION} \
                                    --query "Images[0].State" \
                                    --profile ${AWS_PROFILE} \
                                    --output text
                            """,
                            returnStdout: true
                        ).trim()

                        if (state == "available") {
                            echo "AMI is now available."

                            // Share the AMI with the target user
                            sh """
                                aws ec2 modify-image-attribute \
                                    --image-id ${NEW_AMI_ID} \
                                    --launch-permission "Add=[{UserId=${TARGET_USER_ID}}]" \
                                    --region ${DEST_REGION} \
                                    --profile ${AWS_PROFILE}
                            """

                            // Fetch the snapshot ID associated with the AMI
                            SNAPSHOT_ID = sh(
                                script: """
                                    aws ec2 describe-images \
                                        --region ${DEST_REGION} \
                                        --image-ids ${NEW_AMI_ID} \
                                        --query "Images[0].BlockDeviceMappings[*].Ebs.SnapshotId" \
                                        --profile ${AWS_PROFILE} \
                                        --output text
                                """,
                                returnStdout: true
                            ).trim()

                            echo "Snapshot ID: ${SNAPSHOT_ID}"

                            // Share the snapshot with the target user
                            sh """
                                aws ec2 modify-snapshot-attribute \
                                    --snapshot-id ${SNAPSHOT_ID} \
                                    --attribute createVolumePermission \
                                    --operation-type add \
                                    --user-ids ${TARGET_USER_ID} \
                                    --region ${DEST_REGION} \
                                    --profile ${AWS_PROFILE}
                            """

                            echo "AMI ${NEW_AMI_ID} shared in ${DEST_REGION}."
                            break
                        } else {
                            echo "AMI is still in state: ${state}. Waiting..."
                            sleep(time: 300, unit: 'SECONDS')
                        }

                        COUNTER = COUNTER + 1
                    }
                }
            }
        }
    }
}